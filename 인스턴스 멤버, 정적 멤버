객체마다 가지고 있는 필드와 메소드를 인스턴스 멤버라고 한다.
인스턴스 필드와 인스턴스 메소드는 객체 없이 사용이 불가능하다.
this는 객체 자기 자신의 주소를 참조하는 것이다.
매개변수와 필드명이 동일할 때 인스턴스 필드(객체)임을 명확히 하기 위해 사용한다.

정적 멤버는 객체가 아니라 클래스에 존재한다. 그래서 객체를 필요로하는 인스턴스 필드와 인스턴스 메소드와 다르다.
정적 필드와 정적 메소드는 객체를 필요로하지 않고 클래스로 바로 접근해 사용한다. 클래스 자체를 사용한다. 
static 키워드를 통해 컴파일과 동시에 1순위로 메모리에 등록되므로 정적 필드와 정적 메소드는 바로 사용가능해진다.
클래스가 컴파일 하면서 바이트 코드를 읽는다. 클래스 로더는 바이트 코드를 적재해 메소드 영역에 정적 필드와 정적 메소드가 등록된다. 
static은 공용으로 쓰고 싶을 때, 즉 똑같은 메모리를 쓰고 싶을 때 사용한다.

클래스. 필드;
클래스. 메소드 (매개변수);

package phj.test01;

public class Calculator {

		static double pi = 3.141592;	//static 필드

		static int plus(int x, int y) {	//static 메서드
			int result= x + y;
			return result;
			
		}
		static int minus(int x, int y) {	//static 메서드
			int result= x - y;
			return result;
		}
}
package phj.test01;

public class CalculatorMain {

	public static void main(String[] args) {
		
		double result1= 10* 10* Calculator.pi;
		int result2= Calculator.plus(10,20);
		int result3= Calculator.minus(10,5);
		
		System.out.println("result1= "+ result1);
		System.out.println("result2= "+ result2);
		System.out.println("result3= "+ result3);
	}
}

인스턴스 멤버와 정적 멤버의 차이는
인스턴스 필드- 데이터가 객체마다 다를 때, 정적 필드- 공용으로 사용하는 데이터일 때/ 예를 들어 계산기별로 색상이 다르면 인스턴스 필드, 계산기마다 파이값은 같으니 정적 필드로.

정적 필드에서 클랫 내부에 선언된 static 중 값을 가공해야할 필요가 있다면 정적 초기화 블럭을 사용하면 된다. 사용 예시 - static { ~}
정적 블록 내부엔 인스턴스 필드와 인스턴스 메소드는 사용할 수 없다. 또한 this를 사용할 수 없다. >>static은 객체 없이 바로 실행되도록 하는 것이기 때문이다.

싱글톤이란 정적멤버에서 만드는 단 하나의 객체이다. 하나의 객체를 공용으로 사용하기 위해 만든 것이다. 동일한 객체이므로 주소 역시 동일하다.
싱글톤은 클래스 내부에서만 공용으로 쓰기로 한 것이기 떄문에 외부에서 new연산자로 생성자를 호출할 수 없도록 막아야한다. 
private라는 접근제한자를 생성자 앞에 붙이면 된다. 또한 클래스 자신의 타입으로 정적필드를 선언하고 외부에서 호출할 수 있는 정적 메소드인 getInstance를 선언하면 된다.

package phj.test01;

public class Calculator {

		static int form1To10Sum;
		
		static {
				int sum= 0;
				for( int i = 1; i <= 10; i ++) {
					sum= sum+i;
				}
				form1To10Sum = sum;
		}
}
package phj.test01;

public class CalculatorMain {

	public static void main(String[] args) {
		
		System.out.println("Sum of 1 to 10: "+ Calculator.form1To10Sum);
	}
}
